public class romantoint {
    static Map<Character, Integer> map = new HashMap<>() {{
        put('I', 1);
        put('V', 5);
        put('X', 10);
        put('L', 50);
        put('C', 100);
        put('D', 500);
        put('M', 1000);
    }};

    static int romanToInt(String s) {
        s = s.replace("CM", "DCCCC");
        s = s.replace("CD", "CCCC");
        s = s.replace("XC", "LXXXX");
        s = s.replace("XL", "XXXX");
        s = s.replace("IX", "VIIII");
        s = s.replace("IV", "IIII");

        char[] arr = s.toCharArray();
        int sum = 0;
        for (char a : arr) {
            sum += map.get(a);
        }
        return sum;
    }

    //faster solution
    //int is between 2.147b
    //bye is between -128 - 127

    public int romanToInt2(String s) {
        int n = 0;
        char prev = ' ';
        for (byte i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            n += getValue(c, prev);
            prev = c;
        }
        return n;
    }

    private int getValue(char c, char prev) {
        switch (c) {
            case 'I':
                return 1;
            case 'V':
                return prev == 'I' ? 3 : 5;
            case 'X':
                return prev == 'I' ? 8 : 10;
            case 'L':
                return prev == 'X' ? 30 : 50;
            case 'C':
                return prev == 'X' ? 80 : 100;
            case 'D':
                return prev == 'C' ? 300 : 500;
            case 'M':
                return prev == 'C' ? 800 : 1000;
        }
        
        throw new IllegalArgumentException();
    }
}
